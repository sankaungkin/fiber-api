// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/product": {
            "get": {
                "description": "Fetch all products",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Fetch all products",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Product"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HttpError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create new product based on paramters",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Create new product based on paramters",
                "parameters": [
                    {
                        "description": "Product Data",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Product"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HttpError"
                        }
                    }
                }
            }
        },
        "/api/product/{id}": {
            "get": {
                "description": "Fetch individual product by Id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Fetch individual product by Id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "product Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HttpError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update individual product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Update individual product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "product Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Product Data",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateProductDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HttpError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Update individual product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Update individual product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "product Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.HttpError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "httputil.HttpError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "status bad request"
                }
            }
        },
        "models.Product": {
            "type": "object",
            "required": [
                "buyPrice",
                "productName",
                "qtyOhHand",
                "reorderlvl",
                "sellPriceLevel1",
                "sellPriceLevel2",
                "uom"
            ],
            "properties": {
                "brand": {
                    "type": "string"
                },
                "buyPrice": {
                    "type": "integer",
                    "minimum": 1
                },
                "categoryId": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "productName": {
                    "type": "string",
                    "minLength": 3
                },
                "qtyOhHand": {
                    "type": "integer"
                },
                "reorderlvl": {
                    "type": "integer",
                    "minimum": 1
                },
                "sellPriceLevel1": {
                    "type": "integer",
                    "minimum": 1
                },
                "sellPriceLevel2": {
                    "type": "integer",
                    "minimum": 1
                },
                "uom": {
                    "type": "string",
                    "minLength": 3
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.UpdateProductDTO": {
            "type": "object",
            "required": [
                "buyPrice",
                "categoryId",
                "productName",
                "reorderlvl",
                "sellPriceLevel1",
                "sellPriceLevel2",
                "uom"
            ],
            "properties": {
                "brand": {
                    "description": "QtyOnHand       int    ` + "`" + `json:\"qtyOhHand\" validate:\"required\"` + "`" + `",
                    "type": "string"
                },
                "buyPrice": {
                    "type": "integer",
                    "minimum": 1
                },
                "categoryId": {
                    "type": "integer"
                },
                "isActive": {
                    "type": "boolean"
                },
                "productName": {
                    "type": "string",
                    "minLength": 3
                },
                "reorderlvl": {
                    "type": "integer",
                    "minimum": 1
                },
                "sellPriceLevel1": {
                    "type": "integer",
                    "minimum": 1
                },
                "sellPriceLevel2": {
                    "type": "integer",
                    "minimum": 1
                },
                "uom": {
                    "type": "string",
                    "minLength": 2
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Fiber API",
	Description:      "This is a sample swagger for Fiber",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
